<pre>
public interface Bag<E> extends Collection<E>, Iterable<E>
	//bag interface
	int cardinality();
	int frequency(Object object);
	boolean contains(Object object, int min, int max);
*	Set<E> toSet(Supplier<Set<E>> factory);
*	Map<E, Integer> toMap(Supplier<Map<E, Integer>> factory);

*	Iterator<E> iterator(boolean unique);
*	BagIterator<E> bagIterator();
*	BagIterator<E> bagIterator(boolean unique);
*	Stream<E> stream(boolean unique);
*	Stream<E> parallelStream(boolean unique);

	int add(E element, int occurrences);
	int remove(Object object, int occurrences);
	int put(E element, int occurrences);
	int set(E element, int frequency);
	int place(Object object, int frequency);
	int erase(Object object);
*	int eraseIf(Predicate<? super E> filter);

	//collection interface
	int size();															HashSet/RegularEnumSet/JumboEnumSet/TreeSet
	boolean isEmpty();													HashSet/RegularEnumSet/JumboEnumSet/TreeSet
	boolean contains(Object object);									AbstractCollection/HashSet/RegularEnumSet/JumboEnumSet/TreeSet
	Object[] toArray();													AbstractCollection
	<T> T[] toArray(T[] array);											AbstractCollection

*	Stream<E> stream();													Collection
*	Stream<E> parallelStream();											Collection

	boolean add(E element);												AbstractCollection/HashSet/RegularEnumSet/JumboEnumSet/TreeSet
	boolean remove(Object object);										AbstractCollection/HashSet/RegularEnumSet/JumboEnumSet/TreeSet

	boolean containsAll(Collection<?> collection);						AbstractCollection/RegularEnumSet/JumboEnumSet
	boolean addAll(Collection<? extends E> collection);					AbstractCollection/RegularEnumSet/JumboEnumSet/TreeSet
	boolean removeAll(Collection<?> collection);						AbstractCollection/AbstractSet/RegularEnumSet/JumboEnumSet
	boolean retainAll(Collection<?> collection);						AbstractCollection/RegularEnumSet/JumboEnumSet
*	boolean removeIf(Predicate<? super E> filter);						Collection
	void clear();														AbstractCollection/HashSet/RegularEnumSet/JumboEnumSet/TreeSet

	//iterable interface
	Iterator<E> iterator();												HashSet/RegularEnumSet/JumboEnumSet/TreeSet
*	Spliterator<T> spliterator();										Iterable/Collection/Set/HashSet/LinkedHashSet/SortedSet/TreeSet
*	void forEach(Consumer<? super T> action);							Iterable

	//object interface
	int hashCode();														AbstractSet
	boolean equals(Object object);										AbstractSet/RegularEnumSet/JumboEnumSet
	String toString();													AbstractCollection
	Objetct clone();													HashSet/EnumSet/JumboEnumSet/TreeSet

public interface BagIterator<E> extends Iterator<E>
	//bag iterator behaviour
	int occurrence();
	int frequency();
	//int set(int frequency);
	//int delete();

	//iterator behaviour
	boolean hasNext();
	E next();
	void remove();

protected static final class Frequency implements Serializable
	public Frequency(int frequency)
	public int get()
	public int set(int frequency)

	//object interface
	public int hashCode()
	public boolean equals(Object object)
	public String toString()

//#####################################################################################################

Objects
Collections
Bags

public class Object
	public interface Iterable<T>
		public interface Collection<E> extends Iterable<E>
			public abstract class AbstractCollection<E> implements Collection<E>

			public interface Set<E> extends Collection<E>
				public abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E>
					public class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable, Serializable
						public class LinkedHashSet<E> extends HashSet<E> implements Set<E>, Cloneable, Serializable
					public abstract class EnumSet<E extends Enum<E>> extends AbstractSet<E> implements Cloneable, Serializable
						class RegularEnumSet<E extends Enum<E>> extends EnumSet<E>
						class JumboEnumSet<E extends Enum<E>> extends EnumSet<E>
				public interface SortedSet<E> extends Set<E>
					public interface NavigableSet<E> extends SortedSet<E>
						public class TreeSet<E> extends AbstractSet<E> implements NavigableSet<E>, Cloneable, Serializable

			public class IdentityHashSet<E> extends AbstractSet<E> implements Set<E>, Serializable, Cloneable
			public class WeakHashSet<E> extends AbstractSet<E> implements Set<E>

			public interface Bag<E> extends Collection<E>
				public abstract class AbstractBag<E> extends AbstractCollection<E> implements Bag<E>
					public class HashBag<E> extends AbstractBag<E> implements Bag<E>, Cloneable, Serializable
						public class LinkedHashBag<E> extends HashBag<E> implements Bag<E>, Cloneable, Serializable
					public abstract class EnumBag<E extends Enum<E>> extends AbstractBag<E> implements Cloneable, Serializable
						class RegularEnumBag<E extends Enum<E>> extends EnumBag<E>
						class JumboEnumBag<E extends Enum<E>> extends EnumBag<E>
					public class IdentityHashBag<E> extends AbstractBag<E> implements Bag<E>, Serializable, Cloneable
					public class WeakHashBag<E> extends AbstractBag<E> implements Bag<E>
				public interface SortedBag<E> extends Bag<E>
					public interface NavigableBag<E> extends SortedBag<E>
						public class TreeBag<E> extends AbstractBag<E> implements NavigableBag<E>, Cloneable, Serializable

	public interface Map<K,V>
		public abstract class AbstractMap<K,V> implements Map<K,V>
			public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable
				public class LinkedHashMap<K,V> extends HashMap<K,V> implements Map<K,V>
			public class EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V> implements Serializable, Cloneable
			public class IdentityHashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Serializable, Cloneable
			public class WeakHashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>
		public interface SortedMap<K,V> extends Map<K,V>
			public interface NavigableMap<K,V> extends SortedMap<K,V>
				public class TreeMap<K,V> extends AbstractMap<K,V> implements NavigableMap<K,V>, Cloneable, Serializable

//#####################################################################################################

http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/
http://commons.apache.org/proper/commons-collections/javadocs/api-release/index.html
http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/index.html
http://www.jroller.com/rajasekar/entry/java_fail_fast_iterators_exposed

sobrecarga de metodos para operacoes distinct
criar iterator implementation fail-fast
criar bulk operations com distinct
criar Bag.Entry<E> para stream
tirar modify, concentrar em put/set

	Entry(E element)
	get()
	add()
	remove()
	put(E element, int occurrences)
	set(E element, int frequency)
	putIfFound(Object object, int occurrences)
	setIfFound(Object object, int frequency)
	frequency()

public interface Bag<E> implements Collection<E>, Map<E, Integer>

int remove(Object object, boolean distinct);
boolean containsAll(Collection<?> collection, boolean distinct);
boolean addAll(Collection<? extends E> collection, boolean distinct);
boolean removeAll(Collection<?> collection, boolean distinct);
boolean retainAll(Collection<?> collection, boolean distinct);
boolean removeIf(Predicate<? super E> filter, boolean distinct);
int addIf(Predicate<? super E> filter, int occurrences);
int setIf(Predicate<? super E> filter, int occurrences);

Iterator<E> iterator(boolean distinct);
BagIterator<E> bagIterator(boolean distinct);
Stream<E> stream(boolean distinct);
Stream<E> parallelStream(boolean distinct);

Iterator<Bag.Entry<E>> entryIterator();
Spliterator<Bag.Entry<E>> entrySpliterator();
Stream<Bag.Entry<E>> entryStream(boolean unique);
Stream<Bag.Entry<E>> entryParallelStream(boolean unique);

Set<E> toView(Supplier<Set<E>> factory);																Returns a Set view of the keys contained in this map.
Set<Bag.Entry<E>> toView(Supplier<Set<Bag.Entry<E>>> factory);										Returns a Set view of the mappings contained in this map.

<T> Set<T> toView();

boolean contains(Predicate<? super E> filter);
boolean contains(Predicate<? super Bag.Entry<E>> filter);
</pre>

<pre>
Interface;Return;;Method;Description
Collection;boolean;;add(E e);Ensures that this collection contains the specified element (optional operation).
Collection;boolean;;addAll(Collection<? extends E> c);Adds all of the elements in the specified collection to this collection (optional operation).
Collection;void;;clear();Removes all of the elements from this collection (optional operation).
Collection;boolean;;contains(Object o);Returns true if this collection contains the specified element.
Collection;boolean;;containsAll(Collection<?> c);Returns true if this collection contains all of the elements in the specified collection.
Collection;boolean;;equals(Object o);Compares the specified object with this collection for equality.
Collection;int;;hashCode();Returns the hash code value for this collection.
Collection;boolean;;isEmpty();Returns true if this collection contains no elements.
Collection;Iterator<E>;;iterator();Returns an iterator over the elements in this collection.
Collection;default Stream<E>;;parallelStream();Returns a possibly parallel Stream with this collection as its source.
Collection;boolean;;remove(Object o);Removes a single instance of the specified element from this collection, if it is present (optional operation).
Collection;boolean;;removeAll(Collection<?> c);Removes all of this collection's elements that are also contained in the specified collection (optional operation).
Collection;default boolean;;removeIf(Predicate<? super E> filter);Removes all of the elements of this collection that satisfy the given predicate.
Collection;boolean;;retainAll(Collection<?> c);Retains only the elements in this collection that are contained in the specified collection (optional operation).
Collection;int;;size();Returns the number of elements in this collection.
Collection;default Spliterator<E>;;spliterator();Creates a Spliterator over the elements in this collection.
Collection;default Stream<E>;;stream();Returns a sequential Stream with this collection as its source.
Collection;Object[];;toArray();Returns an array containing all of the elements in this collection.
Collection;<T> T[];;toArray(T[] a);"Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array."
Map;void;;clear();Removes all of the mappings from this map (optional operation).
Map;default V;;compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction);Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).
Map;default V;;computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction);If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.
Map;default V;;computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction);If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.
Map;boolean;;containsKey(Object key);Returns true if this map contains a mapping for the specified key.
Map;boolean;;containsValue(Object value);Returns true if this map maps one or more keys to the specified value.
Map;Set<Map.Entry<K,V>>;toView();entrySet();Returns a Set view of the mappings contained in this map.
Map;boolean;;equals(Object o);Compares the specified object with this map for equality.
Map;default void;forEach(BiConsumer<? super E,Integer> action);forEach(BiConsumer<? super K,? super V> action);Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
Map;V;frequency(Object o);get(Object key);Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
Map;default V;;getOrDefault(Object key, V defaultValue);Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
Map;int;;hashCode();Returns the hash code value for this map.
Map;boolean;;isEmpty();Returns true if this map contains no key-value mappings.
Map;Set<K>;toView();keySet();Returns a Set view of the keys contained in this map.
Map;default V;;merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction);If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.
Map;V;;put(K key, V value);Associates the specified value with the specified key in this map (optional operation).
Map;void;;putAll(Map<? extends K,? extends V> m);Copies all of the mappings from the specified map to this map (optional operation).
Map;default V;;putIfAbsent(K key, V value);If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.
Map;V;;remove(Object key);Removes the mapping for a key from this map if it is present (optional operation).
Map;default boolean;;remove(Object key, Object value);Removes the entry for the specified key only if it is currently mapped to the specified value.
Map;default boolean;;replace(K key, V oldValue, V newValue);Replaces the entry for the specified key only if currently mapped to the specified value.
Map;default V;;replace(K key, V value);Replaces the entry for the specified key only if it is currently mapped to some value.
Map;default void;;replaceAll(BiFunction<? super K,? super V,? extends V> function);Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
Map;int;;size();Returns the number of key-value mappings in this map.
Map;Collection<V>;;values();Returns a Collection view of the values contained in this map.
</pre>