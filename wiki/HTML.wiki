<pre>

public abstract class Element
	protected Element(Entity entity)
	protected Element(Entity entity, Map<Attribute, Object> attributes)
	public Entity getEntity()
	public Map<Attribute, Object> getAttributes()
	public String buildAttributes()
	public String build()

public abstract class EnclosureElement extends Element
	protected EnclosureElement(Entity entity)
	public List<Element> getElements()
	public Element release(Object element)
	public String build()

public abstract class ContentElement extends EnclosureElement
	protected ContentElement(Entity entity)
	public ContentElement content(String content)
	public String build()

public class HTMLElement extends EnclosureElement
	public HTMLElement()
	public HTMLElement enclose(HeadElement element)
	public HTMLElement enclose(BodyElement element)
	public HTMLElement replace(Object oldElement, HeadElement newElement)
	public HTMLElement define(Attribute attribute)





Component/Part/Piece/Snippet
	Document
	Element
	Markup
	Content
	Comment

HTML
	*Entity						p										Enum				getOpeningTag(), getClosingTag(), getOpeningTagging(), getClosingTagging()
	Element/Markup/Tag			<p>, </p>								Class/Worker		getName(), getDescription(), getStartTag(), getEndTag()
	Attribute					class="a"

	Content						teste
	Element						<p class="a">teste</p>										element(Object content)
	Hypertext/Document			conjunto de elementos
	Component					conjunto de elementos pré-definidos

CSS

HTML (immutable/shareable/composite/constraints (by method overloading))
	Member (conhece a estrutura do elemento)
		Element												<p>, </p>		Class/Worker		getName(), getDescription(), getOpeningTag(), getClosingTag(), getOpeningTagging(), getClosingTagging()
			add(ConcreteElement element) : this								adiciona um dos possiveis elements, laça erro se
			put(ConcreteElement element) : this
			get() : Element													retorna subelemento
			get() : List<Element>											retorna subelemento
			write(Object object) : String									retorna nova string com elemento completo escrito
		Comment?
		Content?
	Attribute												class="a"

	Binder (mutable/assembler)
	Tag								p										Enum/Knower			to help creating elements





Estratégias
	imutaveis/compartilhávies
	nesteables/composites

	mutáveis/compostos/decorators
	nesteables (composite) or assembler ()?
	controller (Document): imutaveis, snippet?
	grafo: entidades, atributos, conteudos















conteudo: textos
estrutura: marcacoes
estilo: atributos/css
comportamento: js

tree/network/chain/structure/net/web
node/vertex





Element/Component: (mutavel devido varios enclose, pode ser total ou parcial)
	conhece estrutura das entidades (imutavel/compartilhadas), atributos (imutavel/compartilhados), conteudos (imutavel?/compartilhados), comentarios (imutavel/compartilhados)
	conhece quais entidades podem estar aninhadas
	metodos fixos para adicionar entidades (pois sao fixas)?
	metodos fixos para adicionar atributos (pois sao fixas)?

Attribute:
	conhece valor atual do atributo
	conhece conjuto de valores possiveis para o atributo
	metodos fixos para adicionar valores (pois sao fixas)?





content: content
element: enclose/release/replace
comment: define
attribute: specify/
attribute: define/undefine/change
html: write

Element
AbstractElement
SoloElement/VoidElement/EmptyElement/FullElement/FilledElement/EntireElement




























































http://en.wikipedia.org/wiki/HTML
http://en.wikipedia.org/wiki/HTML_element
http://en.wikipedia.org/wiki/HTML_attribute

https://developer.mozilla.org/pt-BR/docs/Web/HTML
https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model usar nomenclatura

http://www.w3.org/TR/html401/index/elements.html
http://www.w3.org/TR/html401/index/attributes.html
http://www.cs.tut.fi/~jkorpela/html/nesting.html

packages
	html
	css
	dom
	js

Document
Node/Block/Identifier
	Element
		Markup/Tag
			OpeningMarkup
			ClosingMarkup
	Comment
	Content

Component (defines structure/semantics)
	Markup
	Attribute

Element (defines content/)
	Markup
	Attribute
	Content



Identifier
Attribute
Comment
Content

Tree
Node










classe stateless com static factory method usado via lambda expressions no cliente (nao precisa instanciar classe factory)

filosofia
	pojo
	native tools (netbeans, java db, apache, tomcat)
	frameworkless

classes que organizam/geram codigo html/css (Page/Table/Menu/Form)
	microsoft design http://msdn.microsoft.com/pt-br/library/windows/apps/hh781237.aspx

	http://en.wikipedia.org/wiki/Web_template_system
	http://en.wikipedia.org/wiki/Template_engine_%28web%29
	http://velocity.apache.org/
	http://freemarker.org/
	http://docs.oracle.com/javase/8/docs/api/
	https://code.google.com/p/gagawa/
	https://code.google.com/p/jatl/
	http://dom4j.sourceforge.net/dom4j-1.6.1/index.html
	http://rendersnake.org/index.html

	http://www.w3.org/TR/html401/ (elements, attributes)
	http://www.w3.org/TR/CSS2/ (selectors, properties)

	http://www.w3schools.com/html/
	http://www.w3schools.com/css/
	http://www.w3schools.com/js/js_htmldom.asp

	getters/setters para atributos ou construtor (Tag td = new Tag("td", "align=left width=42%"))
	decorator pattern para dom tree
	Tree/Node classes

	Interfaces
		Component
			Template (objeto q serve de template para formatação de outros objetos)
			Hypertext (Document)
			Element (Tag)
			Attribute
			Event
			Content

elementos com semantica (html5)
quem pode estar dentro de quem
em qual ordem podem aparecer
metodo para validar automaticamente com w3c
como usar lambdas para facilitar
classes para formatacao/identacao do retorno do build
api define o doctype automaticamente pelos elementos


















reader/parser
writer/builder/maker/creator/generator
viewer/renderer

HTMLReader
HTMLWriter
HTMLViewer

HypertextReader
HypertextWriter
HypertextViewer

Hypertext
	Type
	Header
	Body

Markup/Tag/Node/Block
	Type
	Header
	Body
	Anchor (usar nome da tag)

</pre>